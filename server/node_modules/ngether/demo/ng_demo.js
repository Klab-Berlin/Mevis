// --------------------- HELLO
// --------------------- DEMOSYSTEM

var classes = {
	_bubPubSub: require('bubpubsub'),
};
var ngSpot = require('../lib/ngether');
var localBubPubSub = new classes._bubPubSub('local');
var fs = require('fs');
localBubPubSub.defaults.debugging = 1;
var Minions = require('minions');
minions = new Minions(['node']);

if (typeof process.argv[2] !== 'string') {
	console.log('config file needed');
	console.log('use: nodejs ng_demo.js (configFile)');
	process.exit();
	return;
}
var userconfig = require(__dirname + '/' + process.argv[2]);


ngether = new ngSpot(
	userconfig,
	function() {
		ngether._bubPubSubBridge_ToLocal(localBubPubSub);
		ngether.log.add('SPOT ready for action!', 'announce', 'demoSystem');
		ngether.eventBridge(process, 'test', 'broadcast', process, process);
		process.on('test', function() { console.log('@@@@@@@@@@@@@@EVENT TEST @@@@@@@@@@@@@@@@@@@@@@'); console.log(arguments); } );		
		localBubPubSub.subscribe(
			'/request/latency/',
			function(pubData) {
				console.log(':::::::::::::::::::::::::::::::::::::::::::::::::::::::::');
				console.log(pubData);
				ngether.meshBubPubSub.publish(
					pubData.replyBranch,
					{ latency: true }
				);
			},
			{ getBubbles: true },
			'test'
		);
		// ------------- DEMO for bridging bubpubsubs - meaning a locally published topic will be spread over the meshwork according to the targets you specify
		localBubPubSub.subscribe(
			'/bridgeTest',
			function(pubData) {
				// actually this should not happen as long as you do not force the system to target your own spot.
				// anyways, there is a method for testing whether your own spot bridged this bubPubSub, so this is a demo for that...
				if ( ngether.bridgedByMe(pubData) ) {
					console.log('----------------- BOOOOHHH --------------');
				} else {
					console.log('---------------- YEEEEHAAAAAA -----------------');
				}
				console.log(pubData);
			},
			{},
			'myNormalSubscriberDoingSomething'
		);
    // install the bridge
		var myBridge = ngether.bridgeTopic('/bridgeTest', ['spots'], {}, ngether.localBubPubSub);
    // ------------- sendBuffer demo
		localBubPubSub.subscribe(
			'/ngether/receivedBinaryBuffer',
			function(pubData) {
				// actually this should not happen as long as you do not force the system to target your own spot.
				// anyways, there is a method for testing whether your own spot bridged this bubPubSub, so this is a demo for that...
				if ( typeof pubData.fileObject === 'object'  &&  typeof pubData.fileObject.whateveryouwant === 'string' ) {
					console.log('----------------- received Buffer ::: ' + pubData.fileObject.whateveryouwant);
				}
			},
			{},
			'myNormalSubscriberDoingSomething'
		);
		
	}
);

function demoTell() {
	// this expects you to run this function on spot0 or spot2 and be connected to spot1 from the demo configs....
	ngether.tell('desktops/sync/tellDemo', { a:1, b:2 }, [ 'ngetherSpot01_9991_1221' ]);
};

function demoBroadcast() {
	ngether.broadcast('desktops/sync/broadcastDemo', { a:1, b:2 }, [ 'spots' ]);
};


ngether.bridgeTopicDemoTest = function() {
	// trigger a localBubPubSub that should be bridged
	localBubPubSub.publish('/bridgeTest/####################################', { a:1 }, {}, 'meee');
};


ngether.latencyCheck = function(connectionNgetherId) {
	var requestId = minions.randomString(12);
	var thisNgether = this;
	var sentAt = new Date().getTime();
	var testConversation = thisNgether.meshBubPubSub.converse(
		{
			topic: '/toMesh/' + connectionNgetherId +'/request/latency/' + requestId,
			data: {
				replyBranch: '/toMesh/' + thisNgether.config.id + '/reply/request/latency/' + requestId + '/done'
			},
			sender: thisNgether.config.id
		},
		{
			topic: '/fromMesh/' + thisNgether.config.id + '/reply/request/latency/' + requestId + '/',
			callback: function(pubdata) {
				var now = new Date().getTime();
				console.log('LATENCY WAS ' + (now - sentAt) + 'ms');
				return true;
			},
			scope: thisNgether
		}
	);
};
