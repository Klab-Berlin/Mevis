// --------------------- HELLO
// --------------------- DEMOSYSTEM

var classes = {
	_bubPubSub: require('bubpubsub'),
};
var ngHub = require('../lib/ngetherHub');
var ngSpot = require('../lib/ngetherSpot');
var localBubPubSub = new classes._bubPubSub('local');
localBubPubSub.defaults.debugging = 1;


if (typeof process.argv[3] !== 'string') {
	console.log('config file needed');
	process.exit();
	return;
}
var userconfig = require(__dirname + '/' + process.argv[3]);


if (process.argv[2] === 'spot') {
	ngether = new ngSpot(
		userconfig,
		function() {
			ngether._bubPubSubBridge_ToLocal(localBubPubSub);
			ngether.log.add('SPOT ready for action!', 'error', 'demoSystem');
			ngether.eventBridge(process, 'test', 'broadcast', process, process);
			process.on('test', function() { console.log('@@@@@@@@@@@@@@EVENT TEST @@@@@@@@@@@@@@@@@@@@@@'); console.log(arguments); } );
			
			localBubPubSub.subscribe(
				'/request/latency/',
				function(pubData) {
					console.log(':::::::::::::::::::::::::::::::::::::::::::::::::::::::::');
					console.log(pubData);
					ngether.meshBubPubSub.publish(
						pubData.replyBranch,
						{ latency: true }
					);
				},
				{ getBubbles: true },
				'test'
			);
			
			
		}
	);
} else if (process.argv[2] === 'hub') {
	ngether = new ngHub(
		userconfig,
		function() {
			ngether._bubPubSubBridge_ToLocal(localBubPubSub);
			ngether.log.add('HUB ready for action!', 'error', 'demoSystem');
			ngether.eventBridge(process, 'test', 'broadcast', process, process);
			process.on('test', function() { console.log('@@@@@@@@@@@@@@EVENT TEST @@@@@@@@@@@@@@@@@@@@@@'); console.log(arguments); } );
		}
	);
	ngether.latencyCheck = function(connectionNgetherId) {
		var requestId = funcs.makeId(12);
		var thisNgether = this;
		var sentAt = new Date().getTime();
		var testConversation = new funcs.aConversation(
			thisNgether.meshBubPubSub,
			{
				topic: '/toMesh/' + connectionNgetherId +'/request/latency/' + requestId,
				data: {
					replyBranch: '/toMesh/' + thisNgether.config.id + '/reply/request/latency/' + requestId + '/done'
				},
				sender: thisNgether.config.id
			},
			{
				topic: '/fromMesh/' + thisNgether.config.id + '/reply/request/latency/' + requestId + '/',
				callback: function(pubdata) {
					var now = new Date().getTime();
					console.log('LATENCY WAS ' + (now - sentAt) + 'ms');
					return true;
				},
				scope: thisNgether
			}
		);
	};
} else {
	console.log('use: nodejs ng.js (hub||spot) (configFile)');
	process.exit();
}






