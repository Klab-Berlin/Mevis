var fs = require('fs');
var classes = {
	_logger: require('./logger'),
	_bubPubSub: require('bubpubsub'),
	_sugar: require('./sugar'),
	_mongodb: require('mongodb'),
	_funcs: require('./funcs'),
	_engineIO: require('engine.io'),
	_engineIOclient: require('engine.io-client'),
};
var funcs = new classes._funcs();
var ngether = require('./ngether.js');


// --------------------- ngether HUB OBJECT
var ngetherHub = function(config, callback) {
	var thisNgether = this;
	Object.merge(this, ngether.prototype, true);
	this.config = this.defaultConfig();
	Object.merge(this.config, config, true);
	this.id = this.config.id;
	this.connections = {};
	this.subscriptions = {};
	this.commandHandlers = {};
	this.meshBubPubSub = new classes._bubPubSub('mesh');
	this.meshBubPubSub.defaults.debugging = 1;
	this.meshBubPubSub.defaults.throwErrors = true;
	this.meshBubPubSub.subscribe(
		'/toMesh/',
		thisNgether._bubPubSubBridge_ToMesh,
		{ getBubbles: true, scope: thisNgether },
		'bubPubSubBridge_ToMesh'
	);
	this.initBase(
		function() {
			thisNgether.initHub(
				function() {
					// DEBUG
					console.log('HUB HUB HUB DONE.....');
					if (typeof callback === 'function') callback(thisNgether);
				}
			);
		}
	);
	return true;
};


ngetherHub.prototype.defaultConfig = function() {
	var defaults = {
		id: 'ngetherHub_' + funcs.makeId(12),
		allowDirectNetworking: true,
		listConnections: false,
		poolIds: [],
		loggingConfig: {
			log2file: false,
			logfile: 'ngether.log',
			log2database: false,
			database: {
				ip: '127.0.0.1',
				port: 27017,
				name: 'logger',
				collection: 'consoleLog',
				options: {}
			},
			log2console: true
		}
	};
	return defaults;
};


ngetherHub.prototype.getClientList = function() {
	var clients = {};
	for (var i in this.connections) {
		if (typeof this.connections[i].ngether !== 'object') continue;
		var thisConn = this.connections[i];
		if (thisConn.ngether.direction !== 'incoming') continue;
		clients[thisConn.ngether.partnerConfig.id] = thisConn.ngether.partnerConfig;
	}
	return clients;
};


// --------------------- init HUB
ngether.prototype.initHub = function(callback) {
	var myHub = this;	
	var modSteps = myHub.modules;
	var initSteps = [];
	var step04 = {
		id: 'repl',
		executor: function(next, thisEscalator) {
			thisEscalator.thisNgether = myHub;
			funcs.openSocktREPL(myHub.id, myHub.config.replPort);
			myHub.log.add('REPL live on port: ' + myHub.config.replPort, 'job', 'init');
			next();
		}
	};
	initSteps.push(step04);
	var step06 = {
		id: 'socketServer',
		executor: function(next, thisEscalator) {
			myHub.startSocketServer(myHub.config.socketServer.port);
			myHub.log.add('engine.IO server listening on port ' + myHub.config.socketServer.port, 'job', 'init');
			next();
		}
	};
	initSteps.push(step06);
	var understandPubSubs = {
		id: 'understandPubSubs',
		executor: function(next, thisEscalator) {
			myHub._bubPubSubBridge_FromMesh(next);
		}
	};
	initSteps.push(understandPubSubs);
	for (var i in modSteps) initSteps.push(modSteps[i]);
	var step15 = {
		id: 'initComplete',
		executor: function(next, thisEscalator) {
			myHub.log.add('[ngetherHub] module loaded.');
			if (typeof callback === 'function') callback(myHub);
			next();
		}
	};
	initSteps.push(step15);
	var init = new funcs.escalator('ngetherHubInit', initSteps, false).start();
};


module.exports = ngetherHub;
console.log('[ngetherHub] module loaded.');