/* **************************************
 * module: ngether.prototype.modules['receiveMeshWorkNodes']
 *	this module handles the receiving of MeshWorkNodes. 
 *	it thus enables connecting to thus far unknown spots and hubs
 *	which were known to a newly connected spot/hub
 * *********************************** */
 
var receiveMeshWorkNodes = {
	id: 'receiveMeshWorkNodes',
	executor: function(next, thisEscalator) {
		thisEscalator.thisNgether.listenTo(
			[ 'ngether/meshWorkNodes' ],
			[thisEscalator.thisNgether.config.id],
			function(socketMessage, receivedTopic, incomingSocket) {
				if (typeof incomingSocket.ngether !== 'object') return false;
				if (thisEscalator.thisNgether.config.type === 'spot') {
					for (var i in socketMessage.knownClients) {
						var alreadyConnected = thisEscalator.thisNgether.isConnectedTo(i);
						if (alreadyConnected === false) {
							thisEscalator.thisNgether.connectTo(
								socketMessage.knownClients[i],
								{},
								function(connectedSocket) {
									
								}
							);
						}
					}
					thisEscalator.thisNgether.log.add('received meshWorkNodes on ' + incomingSocket.id + ' by ' + thisEscalator.thisNgether.connections[incomingSocket.id].ngether.partnerConfig.id, 'plain', 'receiveMeshWorkNodes');
				}
				return true;
			}
		);
		thisEscalator.thisNgether.log.add('receiveMeshWorkNodes plugged in !', 'job', 'init');
		next();
	}
};

module.exports = receiveMeshWorkNodes;