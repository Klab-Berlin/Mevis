/* 
	use it like this: 
		ngether.eventBridge(eventName, 'emit||broadcast||tell', targets);
		REPL: 
			//ngether.eventBridge('test', 'broadcast');
			process.emit('test', 1, 'b', 3, { d: 'a' });
*/


var understandEventEmitted = {
	id: 'eventEmitter',
	executor: function(next, thisEscalator) {
		// add an EventEmitter class to out ngether
		var eventEmitter = require('events').EventEmitter;
		thisEscalator.thisNgether.events = new eventEmitter();
		
		thisEscalator.thisNgether.listenTo(
			[ 'ngether/eventEmitted' ],
			[thisEscalator.thisNgether.config.id],
			function(socketMessage, receivedTopic, incomingSocket) {
				thisEscalator.thisNgether.log.add('received eventEmitted on ' + incomingSocket.id + ' by ' + thisEscalator.thisNgether.connections[incomingSocket.id].ngether.partnerConfig.id, 'plain', 'understandEventEmitted');
				if (socketMessage.emittingNgether === thisEscalator.thisNgether.id) {
					//console.log('self-authored');
					return false;
				} else {
					thisEscalator.thisNgether.events.emit.apply(thisEscalator.thisNgether.events, socketMessage.event);
				}
				return true;
			}
		);
		thisEscalator.thisNgether.log.add('understandEventEmitted plugged in !', 'job', 'init');
		thisEscalator.thisNgether.eventBridge = function(eventEmitterSource, eventName, meshCommunicationMode, eventEmitterTarget, eventEmitterTargetScope) {
			var handler = function(e) {};
			if (typeof meshCommunicationMode === 'Object' && meshCommunicationMode.length > 0) {
				handler = function(e) {
					var parameters = [ eventName ];
					for (var n = 0; n < arguments.length; n++) {
						parameters.push(arguments[n]);
						if (typeof arguments[n] === 'string' && arguments[n].indexOf('ngethered@') === 0) {
							return false;
						}
					}
					thisEscalator.thisNgether.tell('ngether/eventEmitted', { event: parameters, emittingNgether: thisEscalator.thisNgether.id  }, meshCommunicationMode);
				};
			} else if (typeof meshCommunicationMode === 'string' && meshCommunicationMode === 'broadcast') {
				handler = function() {
					var parameters = [ eventName ];
					for (var n = 0; n < arguments.length; n++) {
						parameters.push(arguments[n]);
						if (typeof arguments[n] === 'string' && arguments[n].indexOf('ngethered@') === 0) {
							return false;
						}
					}
					parameters.push('ngethered@' + thisEscalator.thisNgether.id);
					thisEscalator.thisNgether.broadcast('ngether/eventEmitted', { event: parameters, emittingNgether: thisEscalator.thisNgether.id  });
				};
			}
			eventEmitterSource.on(eventName, handler);
			thisEscalator.thisNgether.events.on(
				eventName,
				function() {
					var emitScope = (typeof eventEmitterTargetScope !== 'undefined') ? eventEmitterTargetScope : process;
					var eventParameters = [ eventName ];
					for (var i in arguments) eventParameters.push(arguments[i]);
					eventEmitterTarget.emit.apply(emitScope, eventParameters);
				}
			);
		};
		next();
	}
};

module.exports = understandEventEmitted;